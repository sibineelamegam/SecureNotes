// ðŸ“¦ SECURE NOTE APP â€“ FULL PROJECT STRUCTURE AND FLOW

// --------------------------------------------
// ðŸ”§ BACKEND STRUCTURE (/server)
// --------------------------------------------

/*
server/
â”œâ”€â”€ config/
â”‚   â”œâ”€â”€ db.js            // Connects to MongoDB using Mongoose.
â”‚   â””â”€â”€ corsOptions.js   // CORS config to allow frontend origin with credentials.

â”œâ”€â”€ controllers/
â”‚   â”œâ”€â”€ auth/
â”‚   â”‚   â”œâ”€â”€ register.js       // Handles user registration.
â”‚   â”‚   â”œâ”€â”€ login.js          // Authenticates user and sets cookies.
â”‚   â”‚   â”œâ”€â”€ logout.js         // Clears refresh token cookie.
â”‚   â”‚   â””â”€â”€ refresh.js        // Issues new access token using refresh token.
â”‚   â”œâ”€â”€ users/
â”‚   â”‚   â”œâ”€â”€ getProfile.js     // Fetches profile of currently logged-in user.
â”‚   â”‚   â”œâ”€â”€ updateProfile.js  // Allows users to update their own profile.
â”‚   â”‚   â”œâ”€â”€ getAllUsers.js    // Admin: Fetches all user accounts.
â”‚   â”‚   â”œâ”€â”€ updateUserById.js // Admin: Updates user info by ID.
â”‚   â”‚   â””â”€â”€ deleteUserById.js // Admin: Deletes a user by ID.
â”‚   â””â”€â”€ notes/
â”‚       â”œâ”€â”€ createNote.js     // Adds a new note for the logged-in user.
â”‚       â”œâ”€â”€ getNotes.js       // Fetches all notes for the user.
â”‚       â”œâ”€â”€ getNoteById.js    // Gets a specific note by ID.
â”‚       â”œâ”€â”€ updateNote.js     // Updates a note (owner or admin).
â”‚       â””â”€â”€ deleteNote.js     // Deletes a note (owner or admin).

â”œâ”€â”€ middleware/
â”‚   â”œâ”€â”€ verifyJWT.js     // Middleware to protect private routes using JWT from cookies.
â”‚   â””â”€â”€ verifyRoles.js   // Middleware to restrict routes based on user roles.

â”œâ”€â”€ models/
â”‚   â”œâ”€â”€ User.js          // Mongoose schema: username, email, password, age, gender, dob, phone, address (city & country), role, status, firstName, lastName.
â”‚   â””â”€â”€ Note.js          // Mongoose schema: title, content, userId, timestamps.

â”œâ”€â”€ routes/
â”‚   â”œâ”€â”€ authRoutes.js    // Routes: /register, /login, /logout, /refresh
â”‚   â”œâ”€â”€ userRoutes.js    // Routes: /profile, /admin/users
â”‚   â””â”€â”€ noteRoutes.js    // Routes: /notes CRUD

â””â”€â”€ server.js
    // Entry point for backend. Connects DB, sets middleware, loads routes, starts server.
*/

// Token Strategy:
// âœ… Access & Refresh tokens stored in secure HTTP-only cookies

// Roles:
// - "User"  â†’ Can manage own profile and notes
// - "Admin" â†’ Full access to users and notes


// --------------------------------------------
// ðŸ’» FRONTEND STRUCTURE (/client)
// --------------------------------------------

/*
client/
â”œâ”€â”€ api/
â”‚   â””â”€â”€ axios.js              // Axios instance with baseURL and credentials enabled.

â”œâ”€â”€ context/
â”‚   â””â”€â”€ AuthProvider.jsx      // Provides auth context (user, role, token status, etc.).

â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ Header.jsx            // Logo + Login/Register (unauthenticated) or hamburger + avatar dropdown (authenticated).
â”‚   â””â”€â”€ Sidebar.jsx           // Shows links: Dashboard, Profile, Notes; Admin extras: User/Note Management, Create User.

â”œâ”€â”€ pages/
â”‚   â”œâ”€â”€ LoginPage.jsx         // Login form, sets auth state.
â”‚   â”œâ”€â”€ RegisterPage.jsx      // Public registration or admin-create user form.
â”‚   â”œâ”€â”€ DashboardPage.jsx     // Role-based content display.
â”‚   â”œâ”€â”€ ProfilePage.jsx       // View/edit personal info.
â”‚   â”œâ”€â”€ UserNotesPage.jsx     // Create + view own notes.
â”‚   â”œâ”€â”€ NoteDetailsPage.jsx   // View/edit/delete specific note.
â”‚   â”œâ”€â”€ AdminUserManagementPage.jsx // Admin: Full CRUD for users.
â”‚   â”œâ”€â”€ NoteManagementPage.jsx      // Admin: View/edit/delete any notes.
â”‚   â””â”€â”€ RegisterNewUserPage.jsx     // Admin-only form to register users.

â”œâ”€â”€ Layout.jsx or MainLayout.jsx
â”‚   // Wraps all pages with Header, Sidebar, and <Outlet />

â”œâ”€â”€ PersistLogin.jsx          // Auto-refresh token on app load.
â””â”€â”€ RequireAuth.jsx & RequireAdmin.jsx
    // Route protection based on auth and role.
*/


// --------------------------------------------
// âœ… FINAL ROUTE STRUCTURE EXAMPLE
// --------------------------------------------

/*
Public Routes:
- /login             â†’ LoginPage.jsx
- /register          â†’ RegisterPage.jsx

Protected Routes (User & Admin):
- /dashboard         â†’ DashboardPage.jsx
- /profile           â†’ ProfilePage.jsx
- /notes             â†’ UserNotesPage.jsx
- /notes/:id         â†’ NoteDetailsPage.jsx

Admin-Only Routes:
- /admin/users       â†’ AdminUserManagementPage.jsx
- /admin/notes       â†’ NoteManagementPage.jsx
- /admin/register    â†’ RegisterNewUserPage.jsx
*/


// âœ… All tokens managed securely via HTTP-only cookies
// âœ… Sidebar and Header render conditionally based on auth state
// âœ… Role-based UI and access enforced on both frontend and backend
